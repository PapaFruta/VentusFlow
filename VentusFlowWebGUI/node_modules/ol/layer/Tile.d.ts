export default TileLayer;
/**
 * @classdesc
 * For layer sources that provide pre-rendered, tiled images in grids that are
 * organized by zoom levels for specific resolutions.
 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
 * property on the layer object; for example, setting `title: 'My Title'` in the
 * options means that `title` is observable, and has get/set accessors.
 *
 * @template {import("../source/Tile.js").default} [TileSourceType=import("../source/Tile.js").default]
 * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>
 * @api
 */
declare class TileLayer<TileSourceType extends import("ol/source/Tile").default = import("ol/source/Tile").default<import("ol/Tile").default>> extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer<TileLayer<import("ol/source/Tile").default<import("ol/Tile").default>> | import("ol/layer/VectorTile").default<import("ol/source").VectorTile<any>, any>>> {
    /**
     * @param {import("./BaseTile.js").Options<TileSourceType>} [options] Tile layer options.
     */
    constructor(options?: import("ol/layer/BaseTile").Options<TileSourceType>);
    /**
     * @override
     */
    override createRenderer(): CanvasTileLayerRenderer<this>;
}
import CanvasTileLayerRenderer from 'ol/renderer/canvas/TileLayer';
import BaseTileLayer from 'ol/layer/BaseTile';
//# sourceMappingURL=Tile.d.ts.map